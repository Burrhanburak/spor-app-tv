generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  hashedPassword    String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  ip                    String?
  isTwoFactorEnabled    Boolean                @default(false)
  role                  UserRole               @default(USER)
  password              String?
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model VerificationToken {
  token   String   @unique
  expires DateTime
  email   String
  id      String   @id @default(cuid())

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Sport {
  id            Int         @id @default(autoincrement())
  imageString   String
  title         String
  age           Int
  duration      Float
  overview      String
  release       Int
  videoSource   String
  category      String
  youtubeString String
  createdAt     DateTime    @default(now())
  WatchLists    WatchList[]
}

model WatchList {
  id      String @id @default(uuid())
  userId  String
  SportId Int?
  Sport   Sport? @relation(fields: [SportId], references: [id])

  @@unique([userId, SportId])
}

enum UserRole {
  ADMIN
  USER
}
